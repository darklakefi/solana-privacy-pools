use crate::instructions::{WithdrawProofData, RagequitProofData};
use groth16_solana::groth16::{Groth16Verifier, Groth16Verifyingkey};

// Withdraw circuit verifying key from groth16_vkey.json
// This is extracted from /home/vitorpy/zk/privacy-pools-core/packages/circuits/build/withdraw/groth16_vkey.json

pub const WITHDRAW_VK_ALPHA_G1: [u8; 64] = [
    226, 242, 109, 190, 162, 153, 245, 34, 59, 100, 108, 177, 251, 51, 234, 219, 5, 157, 148, 7, 85, 157, 116, 65, 223, 217, 2, 227, 167, 154, 77, 45, 38, 25, 77, 0, 255, 202, 118, 240, 1, 3, 35, 25, 10, 131, 137, 206, 69, 227, 159, 32, 96, 236, 216, 97, 176, 206, 55, 60, 80, 221, 190, 20
];

pub const WITHDRAW_VK_BETA_G2: [u8; 128] = [
    171, 183, 61, 193, 127, 188, 19, 2, 30, 36, 113, 224, 192, 139, 214, 125, 132, 1, 245, 43, 115, 214, 208, 116, 131, 121, 76, 173, 71, 120, 24, 14,
    12, 6, 243, 59, 188, 76, 121, 169, 202, 222, 242, 83, 166, 128, 132, 211, 130, 241, 119, 136, 248, 133, 201, 175, 209, 118, 247, 203, 47, 3, 103, 9,
    200, 206, 208, 122, 84, 6, 127, 213, 169, 5, 234, 62, 198, 183, 150, 248, 146, 145, 47, 77, 210, 35, 49, 49, 199, 168, 87, 164, 177, 193, 57, 23,
    167, 70, 35, 17, 77, 154, 166, 157, 55, 13, 122, 107, 196, 222, 253, 170, 60, 140, 63, 217, 71, 232, 245, 153, 74, 112, 138, 224, 209, 251, 76, 48,
];

pub const WITHDRAW_VK_GAMMA_G2: [u8; 128] = [
    237, 246, 146, 217, 92, 189, 222, 70, 221, 218, 94, 247, 212, 34, 67, 103, 121, 68, 92, 94, 102, 0, 106, 66, 118, 30, 31, 18, 239, 222, 0, 24,
    194, 18, 243, 174, 183, 133, 228, 151, 18, 231, 169, 53, 51, 73, 170, 241, 37, 93, 251, 49, 183, 191, 96, 114, 58, 72, 13, 146, 147, 147, 142, 25,
    170, 125, 250, 102, 1, 204, 230, 76, 123, 211, 67, 12, 105, 231, 209, 227, 143, 64, 203, 141, 128, 113, 171, 74, 235, 109, 140, 219, 165, 94, 200, 18,
    91, 151, 34, 209, 220, 218, 172, 85, 243, 142, 179, 112, 51, 49, 75, 188, 149, 51, 12, 105, 173, 153, 158, 236, 117, 240, 95, 88, 208, 137, 6, 9,
];

pub const WITHDRAW_VK_DELTA_G2: [u8; 128] = [
    251, 124, 47, 180, 236, 161, 212, 46, 168, 220, 78, 207, 149, 146, 204, 245, 39, 111, 104, 23, 189, 114, 41, 29, 33, 212, 6, 168, 219, 24, 112, 39,
    44, 189, 224, 64, 249, 56, 179, 62, 9, 153, 247, 252, 255, 45, 131, 13, 240, 242, 70, 220, 240, 220, 128, 73, 241, 158, 19, 46, 52, 184, 41, 0,
    186, 79, 160, 135, 23, 222, 157, 45, 38, 145, 51, 59, 122, 241, 78, 42, 52, 233, 40, 225, 85, 61, 129, 56, 196, 98, 82, 29, 167, 136, 247, 32,
    131, 189, 155, 204, 28, 131, 23, 162, 46, 138, 230, 23, 126, 65, 246, 62, 156, 76, 55, 149, 115, 241, 150, 27, 55, 42, 53, 217, 210, 97, 177, 47,
];

pub const WITHDRAW_VK_IC: [[u8; 64]; 9] = [
    [248, 75, 142, 57, 136, 67, 217, 181, 61, 168, 121, 24, 245, 30, 194, 30, 121, 91, 117, 5, 142, 116, 24, 24, 195, 14, 207, 101, 203, 38, 42, 13, 123, 131, 204, 210, 35, 36, 201, 190, 169, 110, 120, 219, 48, 77, 97, 121, 155, 237, 149, 132, 140, 41, 133, 235, 77, 218, 87, 175, 129, 97, 16, 43],
    [87, 36, 244, 6, 203, 252, 132, 25, 48, 203, 196, 150, 98, 249, 191, 127, 34, 171, 90, 104, 37, 156, 205, 41, 177, 167, 235, 181, 237, 191, 19, 2, 137, 241, 213, 255, 235, 35, 145, 228, 15, 158, 23, 102, 187, 59, 46, 249, 25, 2, 112, 107, 224, 57, 147, 0, 67, 219, 192, 158, 245, 4, 9, 11],
    [2, 54, 169, 110, 4, 234, 140, 135, 236, 134, 190, 234, 191, 21, 131, 23, 87, 44, 11, 253, 149, 167, 174, 66, 127, 43, 109, 66, 1, 222, 177, 35, 172, 81, 204, 148, 155, 111, 144, 67, 184, 233, 218, 2, 62, 68, 213, 205, 33, 165, 177, 207, 196, 104, 184, 188, 108, 214, 145, 19, 80, 164, 212, 3],
    [41, 233, 41, 216, 1, 125, 68, 6, 195, 80, 59, 5, 91, 167, 52, 170, 7, 133, 100, 32, 236, 218, 26, 221, 227, 135, 96, 213, 36, 72, 254, 4, 104, 22, 34, 192, 140, 182, 194, 169, 154, 122, 105, 86, 32, 216, 10, 20, 75, 221, 67, 135, 75, 43, 232, 55, 96, 26, 23, 180, 23, 99, 166, 28],
    [212, 119, 205, 92, 231, 58, 168, 199, 112, 188, 100, 198, 201, 3, 191, 199, 241, 12, 216, 85, 26, 132, 85, 117, 252, 0, 137, 62, 76, 9, 66, 4, 52, 74, 209, 95, 88, 123, 211, 178, 194, 245, 15, 252, 215, 98, 41, 150, 23, 126, 47, 66, 190, 171, 47, 50, 227, 206, 71, 94, 230, 65, 193, 2],
    [221, 120, 49, 170, 54, 125, 25, 202, 180, 193, 74, 254, 30, 238, 183, 31, 120, 59, 56, 210, 205, 193, 117, 128, 22, 227, 18, 48, 62, 210, 231, 25, 149, 104, 74, 110, 42, 108, 36, 137, 233, 219, 19, 3, 15, 223, 245, 198, 25, 192, 214, 186, 118, 231, 140, 102, 229, 177, 13, 126, 178, 178, 99, 25],
    [182, 156, 46, 99, 218, 73, 63, 69, 176, 123, 98, 158, 242, 123, 178, 153, 208, 171, 2, 212, 17, 72, 24, 211, 30, 172, 248, 179, 112, 207, 169, 25, 216, 216, 113, 52, 235, 116, 73, 111, 13, 36, 217, 183, 136, 191, 179, 69, 23, 19, 181, 44, 234, 100, 95, 64, 210, 154, 170, 107, 28, 214, 166, 1],
    [95, 126, 191, 217, 213, 56, 204, 100, 172, 132, 228, 141, 206, 160, 72, 176, 84, 73, 141, 209, 254, 0, 67, 48, 183, 226, 84, 246, 165, 48, 57, 43, 47, 158, 41, 177, 223, 91, 157, 217, 203, 90, 220, 190, 148, 76, 198, 33, 37, 98, 170, 219, 224, 136, 146, 214, 208, 102, 195, 80, 118, 128, 37, 48],
    [228, 18, 152, 107, 24, 203, 90, 129, 138, 177, 249, 64, 226, 232, 85, 243, 237, 45, 69, 18, 119, 14, 236, 73, 178, 247, 253, 242, 168, 240, 247, 26, 162, 63, 116, 241, 227, 136, 86, 126, 131, 227, 232, 17, 132, 45, 214, 141, 101, 106, 145, 139, 180, 204, 68, 29, 53, 216, 175, 67, 100, 32, 247, 3],
];

/// Verify a withdrawal proof using Groth16
pub fn verify_withdraw_proof(proof_data: &WithdrawProofData) -> bool {
    // The withdraw circuit has 8 public inputs:
    // 0: withdrawnValue
    // 1: stateRoot
    // 2: stateTreeDepth
    // 3: ASPRoot
    // 4: ASPTreeDepth
    // 5: context
    // 6: newCommitmentHash
    // 7: existingNullifierHash
    
    const NR_PUBLIC_INPUTS: usize = 8;
    
    if proof_data.public_signals.len() != NR_PUBLIC_INPUTS {
        return false;
    }
    
    // Convert public signals to slice of slices format expected by groth16-solana
    let public_inputs_refs: Vec<&[u8]> = proof_data.public_signals
        .iter()
        .map(|signal| signal.as_slice())
        .collect();
    
    // Create verifying key
    let vk = Groth16Verifyingkey {
        nr_pubinputs: NR_PUBLIC_INPUTS,
        vk_alpha_g1: WITHDRAW_VK_ALPHA_G1,
        vk_beta_g2: WITHDRAW_VK_BETA_G2,
        vk_gamme_g2: WITHDRAW_VK_GAMMA_G2,
        vk_delta_g2: WITHDRAW_VK_DELTA_G2,
        vk_ic: &WITHDRAW_VK_IC,
    };
    
    // Create and run verifier
    match Groth16Verifier::new(
        &proof_data.proof_a,
        &proof_data.proof_b,
        &proof_data.proof_c,
        &public_inputs_refs,
        &vk,
    ) {
        Ok(mut verifier) => {
            // Prepare inputs
            if verifier.prepare_inputs().is_err() {
                return false;
            }
            // Verify the proof
            verifier.verify().is_ok()
        }
        Err(_) => false,
    }
}

/// Verify a ragequit proof
/// Ragequit doesn't use ZK proofs - it's a direct withdrawal by the original depositor
pub fn verify_ragequit_proof(_proof_data: &RagequitProofData) -> bool {
    // Ragequit verification is simpler - just check that the values match
    // The actual verification happens by checking the depositor account
    // and comparing the label
    
    // For now, return true as ragequit doesn't need circuit verification
    // The security comes from checking:
    // 1. The caller is the original depositor (checked in ragequit.rs)
    // 2. The label matches (checked in ragequit.rs)
    // 3. The commitment exists in the tree
    true
}